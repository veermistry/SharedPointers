Due:
    test 4/1/2023 @ 11:59pm
    code 4/3/2023 @ 11:59pm

Assignment:
~~~~~~~~~~~

    - Enable virtual memory
    - Donate a test case (.ok, .cc, .dir)

The physical address space:
~~~~~~~~~~~~~~~~~~~~~~~~~~~

    0x00000000 - 0x00100000      kernel text and data
    0x00100000 - 0x00600000      kernel heap
    0x00600000 - kConfig.memSize available frames
    kConfig.ioAPIC               the IOPIC (one page)
    kConfig.localAPIC            the LAPIC (one page)

The virtual address space:
~~~~~~~~~~~~~~~~~~~~~~~~~~

    The 0x00000000 - 0x80000000   is shared between all threads
    The 0x80000000 - 0xFFFFFFFF+1 is private to each thread

    0x00000000 - 0x00001000      invalid (causes a kernel panic)
    0x00001000 - 0x00100000      kernel text and data
    0x00100000 - 0x00600000      kernel heap
    0x00600000 - kConfig.memSize available frames

The upper half of the virtual address space (starting at 0x80000000) is
private to each thread. It is initially invalid except for 2 permanent
mappings for the LAPIC and IOPIC.

The VMM::naive_mmap() and VMM::naive_munmap calls are used to create
and remove mapping in this range

The physical memory API (in physmem.h):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// called by the bootstrap core to initialize the available frames area
void PhysMem::init(uint32_t start, uint32_t size);

// allocates a new 4K-aligned zero-filled frame, returns its physical address
// panics if out of frames
uint32_t PhysMem::alloc_frame();

// frees an allocated 4K-aligned frame
void PhysMem::free_dealloc_frame(uint32_t pa);

The virtual memory API (in vmm.h):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// called by the bootstrap core to initialize any global virtual memory
// structures. Look in init.cc for exact placement
void VMM::global_init();

// called by each core to initialize any per-core virtual memory
// structures. Look in init.cc for exact placement
void VMM::per_core_init();

// Maps the given file in the calling thread's virtual address space
//     an over simplification of the Unix mmap system call
//
// 'size' indicates the size of the region to be mapped.
//
// 'file' indicates the file or directory whose contents is to be mapped
//
//     if 'file' is null then the region is zero-filled
//
//     if 'size' is larger the available bytes in the file, the rest of
//        the space is zero-filled
//
// 'file_offset' indicates the starting offset of the region in the
//      file that should be mapped
//
//  Returns the virtual address of the mapping, nullptr indicates error
//
//  Notes:
//      - Your implementation should use demand-paging. Do not read
//        the entire file during naive_mmap
//      - All mappings are private
//           * changes are not reflected back in the file
//           * changes are not shared by multiple mappings
//      - The implementation is free to round sizes up to page sizes
//        No guarantees are made regarding the contents of the extra space
//      - Mappings are always made at the lowest available virtual address
//        in the 0x80000000-0xFFFFFFFF+1
void* VMM::naive_mmap(uint32_t size, Shared<Node> file, uint32_t file_offset);

// Unmaps the register containing the given virtual address
//     an over simplification of the Unix munmap system call
//
// 'va' indicates a virtual address in the region to be unmapped
//
// Notes:
//      - All failures are silent
//      - Attempts to unmap the shared space, and the PICS are ignored
void VMM::naive_unmap(void* va);


